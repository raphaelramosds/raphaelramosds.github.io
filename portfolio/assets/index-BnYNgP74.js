(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const n of t.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function c(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function s(e){if(e.ep)return;e.ep=!0;const t=c(e);fetch(e.href,t)}})();const i="https://api.github.com/graphql",a=void 0,u=`{
    viewer {
        login
    }
}`,l=async()=>{try{const r=await fetch(i,{method:"POST",headers:{Authorization:`bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify({query:u})});if(!r.ok)throw new Error(`Response status: ${r.status}`);const o=await r.json();document.querySelector("#feedback").innerHTML="Client connected to Github GraphQL API",console.log(o)}catch(r){document.querySelector("#feedback").innerHTML="Error when connecting to Github GraphQL API",console.log(r.message)}};l();
